@model IEnumerable<AgroMarket.Models.Entities.Product>

<h1>Products</h1>

<p>
    <a asp-action="Create" class="btn btn-primary">Create New</a>
</p

<!-- Sort & Search Options -->
<form id="search-form">
    <div class="input-group mb-3">
        <input type="text" id="search-input" name="searchString" value="@ViewData["CurrentFilter"]" class="form-control" placeholder="Search by Product Name or Category Name" />
        <div class="input-group-append">
            <button type="button" class="btn btn-outline-secondary" onclick="submitSearch()">Search</button>
        </div>
    </div>
</form>

<div class="sort-options">
    <span class="sort-label">Sort By</span>

    <div class="sort-item @(ViewData["SortOrder"]?.ToString() == "price_asc" ? "active" : "")">
        <a href="javascript:void(0);" onclick="submitSort('price_asc')">Price -- Low to High</a>
    </div>

    <div class="sort-item @(ViewData["SortOrder"]?.ToString() == "price_desc" ? "active" : "")">
        <a href="javascript:void(0);" onclick="submitSort('price_desc')">Price -- High to Low</a>
    </div>

     <div class="sort-item @(ViewData["SortOrder"]?.ToString() == "newest" ? "active" : "")">
        <a href="@Url.Action("Index", new { sortOrder = "newest", searchString = ViewData["CurrentFilter"] })">Newest First</a>
    </div>
</div>

<script>
    function submitSearch() {
        const searchString = document.getElementById('search-input').value;
        const sortOrder = '@ViewData["SortOrder"]';
        fetchProducts(searchString, sortOrder);
    }

    function submitSort(sortOrder) {
        const searchString = document.getElementById('search-input').value;
        fetchProducts(searchString, sortOrder);
    }

    function fetchProducts(searchString, sortOrder) {
        $.ajax({
            url: '@Url.Action("Index", "Product")',
            method: 'GET', 
            data: {
                searchString: searchString,
                sortOrder: sortOrder
            },
            success: function (data) {
                $('#product-list').html($(data).find('#product-list').html()); // Update only the product list part
            },
            error: function () {
                alert('Error fetching products.');
            }
        });
    }
</script>


<div id="product-list">
    <table class="table table-striped table-hover">
        <thead class="thead-dark">
            <tr>
                <th>@Html.DisplayNameFor(model => model.ProductName)</th>
                <th>Category Name</th>
                <th>@Html.DisplayNameFor(model => model.Description)</th> 
                <th>@Html.DisplayNameFor(model => model.Price)</th>
                <th>@Html.DisplayNameFor(model => model.StockQuantity)</th>
                <th>@Html.DisplayNameFor(model => model.ImageUrl)</th>
                <th>Average Rating</th> <!-- New column for average rating -->
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr>
                    <td>@Html.DisplayFor(modelItem => item.ProductName)</td>
                    <td>
                        @if (item.ProductCategory != null && item.ProductCategory.Any())
                        {
                            var categoryNames = string.Join(", ", item.ProductCategory.Select(c => c.Category.CategoryName));
                            @categoryNames
                        }
                    </td>
                    <td>@Html.DisplayFor(modelItem => item.Description)</td>
                    <td>@Html.DisplayFor(modelItem => item.Price)</td>
                    <td>@Html.DisplayFor(modelItem => item.StockQuantity)</td>
                    <td>
                        @if (!string.IsNullOrEmpty(item.ImageUrl))
                        {
                            <img src="@item.ImageUrl" alt="@item.ProductName" style="max-width: 100px; max-height: 100px;" />
                        }
                    </td>
                    <td>
                        <!-- Display the average rating from ViewBag -->
                        @{
                            var averageRating = ViewBag.ProductRatings.ContainsKey(item.ProductID) 
                                ? ViewBag.ProductRatings[item.ProductID]
                                : 0;
                        }

                        @if (averageRating > 0)
                        {
                            @averageRating.ToString("F1");
                        }
                        else
                        {
                            <span>No ratings yet</span>
                        }
                    </td>
                    <td>
                        <a href="#" class="btn btn-sm btn-warning" data-toggle="modal" data-target="#editProductModal"
                           onclick="setEditProduct({
                                   ProductID: '@item.ProductID',
                                   ProductName: '@item.ProductName',
                                   Description: '@item.Description',
                                   Price: @item.Price,
                                   StockQuantity: @item.StockQuantity,
                                   CategoryName: '@item.ProductCategory.FirstOrDefault()?.Category.CategoryName'
                               })">
                            Edit
                        </a>

                        <a href="#" class="btn btn-sm btn-info" data-toggle="modal" data-target="#productDetailsModal"
                           onclick="loadProductDetails('@item.ProductID', this)">
                            Details
                        </a>

                        <a href="#" class="btn btn-sm btn-danger" data-toggle="modal" data-target="#deleteConfirmationModal"
                           onclick="setDeleteProduct('@item.ProductName', '@item.ProductID')">Delete</a>

                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>



<!-- Modal for Product Details -->
<div class="modal fade" id="productDetailsModal" tabindex="-1" role="dialog" aria-labelledby="productDetailsModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="productDetailsModalLabel">Product Details</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <h6 id="modalProductName"></h6>
                <p id="modalProductDescription"></p>
                <p><strong>Category Name:</strong> <span id="modalProductCategory"></span></p>
                <p><strong>Price:</strong> <span id="modalProductPrice"></span></p>
                <p><strong>Stock Quantity:</strong> <span id="modalProductStock"></span></p>
                <img id="modalProductImage" src="" alt="Product Image" style="max-width: 100%;" />
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal for Delete Confirmation -->
<div class="modal fade" id="deleteConfirmationModal" tabindex="-1" role="dialog" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteModalLabel">Confirm Delete</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete <span id="deleteProductName"></span>?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteButton">Confirm</button>
            </div>
        </div>
    </div>
</div>


<!-- Modal for Edit Product -->
<div class="modal fade" id="editProductModal" tabindex="-1" role="dialog" aria-labelledby="editProductModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editProductModalLabel">Edit Product</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="editProductForm" enctype="multipart/form-data">
                    <input type="hidden" id="editProductId" />

                    <div class="form-group">
                        <label for="editProductName">Product Name</label>
                        <input type="text" class="form-control" id="editProductName" required />
                    </div>

                    <div class="form-group">
                        <label for="editDescription">Description</label>
                        <textarea class="form-control" id="editDescription"></textarea>
                    </div>

                    <div class="form-group">
                        <label for="editPrice">Price</label>
                        <input type="number" class="form-control" id="editPrice" required />
                    </div>

                    <div class="form-group">
                        <label for="editStockQuantity">Stock Quantity</label>
                        <input type="number" class="form-control" id="editStockQuantity" required />
                    </div>

                    <div class="form-group">
                        <label for="editCategory">Category</label>
                        @* <input type="text" class="form-control" id="editCategoryName" required /> *@
                        <select class="form-control" id="editCategoryName"></select> 

                    </div>

                    <div class="form-group">
                        <label for="editImage">Upload Image</label>
                        <input type="file" class="form-control" id="editImage" accept="image" />
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="saveChangesButton">Save Changes</button>
            </div>
        </div>
    </div>
</div>
<script>
    function setEditProduct(product) {
    $('#editProductId').val(product.ProductID);
    $('#editProductName').val(product.ProductName);
    $('#editDescription').val(product.Description);
    $('#editPrice').val(product.Price);
    $('#editStockQuantity').val(product.StockQuantity);
    
    $('#editCategoryName').val("sath");

    // Show image preview if available
    if (product.ImageUrl) {
        $('#imagePreview').attr('src', product.ImageUrl).show();
    } else {
        $('#imagePreview').hide();
    }

//     // Load category options from the server
// $.ajax({
//     url: '/Product/GetAllCategories',
//     type: 'GET',
//     success: function (categories) {
//         console.log(categories); // Inspect categories data in the console
//         $('#editCategoryName').empty();
//         categories.forEach(category => {
//             $('#editCategoryName').append(
//                 `<option value="${category.CategoryName}">${category.CategoryName}</option>`
//             );
//         });
//     },
//     error: function (xhr, status, error) {
//         console.error('Error loading categories:', xhr.responseText); // Log detailed error information
//     }
// });


}

// Handle Save Changes (including image upload)
$('#saveChangesButton').click(function () {
    var formData = new FormData();
    formData.append('ProductID', $('#editProductId').val());
    formData.append('ProductName', $('#editProductName').val());
    formData.append('Description', $('#editDescription').val());
    formData.append('Price', $('#editPrice').val());
    formData.append('StockQuantity', $('#editStockQuantity').val());
    formData.append('CategoryName', $('#editCategoryName').val());

    var imageFile = $('#editImage')[0].files[0]; // Get the selected image file
    if (imageFile) {
        formData.append('image', imageFile); // Append image to the form data
    }

    // Send the data to the server
    $.ajax({
        url: '/Product/Edit/' + $('#editProductId').val(),
        type: 'PATCH',
        data: formData,
        processData: false,
        contentType: false,
        success: function () {
            alert('Product updated successfully!');
            // Reload or update the page to reflect the changes
            location.reload();
        },
        error: function () {
            alert('Error updating product.');
        }
    });
});
</script>


<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>

<script>
    let lastOpenedButton; // To keep track of the last opened button

    function loadProductDetails(productId, element) {
        lastOpenedButton = element; // Store the last opened button reference
        $.ajax({
            url: '/Product/Details/' + productId, // Adjust the URL to your API route
            type: 'GET',
            success: function (data) {
                // Populate modal fields with the received data
                $('#modalProductName').text(data.productName);
                $('#modalProductDescription').text(data.description);
                $('#modalProductCategory').text(data.categoryName); // Change this line to use CategoryNames
                $('#modalProductPrice').text(data.price);
                $('#modalProductStock').text(data.stockQuantity);
                $('#modalProductImage').attr('src', data.imageUrl);

                // Show the modal
                $('#productDetailsModal').modal('show');
            },
            error: function () {
                alert('Error loading product details');
            }
        });
    }

    // Event listener to handle modal close event
    $('#productDetailsModal').on('hidden.bs.modal', function () {
        // Remove the backdrop
        $('.modal-backdrop').remove(); // Remove backdrop manually
        $('body').removeClass('modal-open'); // Ensure body does not have 'modal-open' class
        if (lastOpenedButton) {
            lastOpenedButton.focus(); // Set focus back to the last opened button
            lastOpenedButton = null; // Clear the reference
        }
    });


    // Event listener to handle modal close event
    $('#productDetailsModal').on('hidden.bs.modal', function () {
        if (lastOpenedButton) {
            lastOpenedButton.focus(); // Set focus back to the last opened button
            lastOpenedButton = null; // Clear the reference
        }
    });

    let deleteProductId = null;

    // Set the product to be deleted
    function setDeleteProduct(productName, productId) {
        $('#deleteProductName').text(productName);  // Set the product name in the modal
        deleteProductId = productId;  // Store the product ID for deletion
    }

    // Handle delete confirmation
    $('#confirmDeleteButton').on('click', function () {
        $.ajax({
            url: '/Product/Delete/' + deleteProductId,  // Make sure this is the correct route
            type: 'DELETE',
            success: function (result) {
                // On success, close the modal
                $('#deleteConfirmationModal').modal('hide');

                // Remove the product from the UI dynamically
                $('#product-' + deleteProductId).remove();

                // Show success alert
                //alert('Product deleted successfully!');                
            },
            error: function () {
                alert('Error deleting product.');
            },
            complete: function() {
                location.reload();
               
            }

        });
    });

    
   

</script>
<style>
    .table {
        margin-bottom: 50px;
    }

    .btn-group .btn.active {
        background-color: #007bff;
        color: #fff;
    }

    .modal-title {
        font-weight: bold;
    }

    .img-fluid {
        max-height: 200px;
    }

    .text-center {
        text-align: center;
    }

    /* Adjust margin and padding for modals */
    .modal-body {
        padding: 20px;
    }

    .modal-footer {
        padding: 10px;
    }

    .form-group {
        margin-bottom: 15px;
    }

    /* Button enhancements */
    .btn-primary,
    .btn-warning,
    .btn-info,
    .btn-danger {
        width: 90px;
        text-align: center;
    }
</style>
<style>
    .sort-options {
    display: flex;
    align-items: center;
}

.sort-label {
    margin-right: 10px;
    font-weight: bold;
}

.sort-item {
    margin-right: 15px;
    cursor: pointer;
}

.sort-item a {
    text-decoration: none;
    color: black;
}

.sort-item.active a {
    font-weight: bold;
    color: #007bff; /* Example for active link color
}

.sort-item:hover a {
    color: #0056b3; /* Hover effect */
}

</style>